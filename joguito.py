import random
import sys
import os
import time
from colorama import Fore, Style, init

# Initialize colorama
init()

# Text styles and colors
BOLD = Style.BRIGHT
END = Style.RESET_ALL
BLUE = Fore.CYAN
RED = Fore.RED
YELLOW = Fore.YELLOW
GREEN = Fore.GREEN

# The game starter is in the end of the commands

def colored_text(text, color=Fore.WHITE, style=Style.NORMAL):
    return f"{style}{color}{text}{END}"

# Text effects
def slow_print(text, delay=0.03, end='\n'):
    for char in text:
        print(char, end='', flush=True)
        time.sleep(delay)
    print(end=end)

def very_slow_print(text, delay=0.07):
    for char in text:
        print(char, end='', flush=True)
        time.sleep(delay)
    print()

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

# Player
class Player:
    
    def __init__(self, name):
        self.name = name
        self.health = 20
        self.defense = 0
        self.attack = 3
        self.crit_chance = 0
        self.equipped_weapon = None
        self.equipped_armor = None
        self.inventory = {
            'keys': [],
            'misc_items': [],
            'weapons': [],
            'armor_pieces': []
        }
        self.reputation = 0

    def calculate_damage(self):
        base_damage = random.randint(self.attack - 2, self.attack)
        crit_damage = random.randint(0, self.crit_chance)
        return base_damage + crit_damage

    def add_to_inventory(self, item_type, item_name):
        self.inventory[item_type].append(item_name)
        slow_print(f'[{BLUE}Voc√™ conseguiu: {END}{BOLD}{item_name}{END}]', delay=0.02)
        input()
        clear_screen()

    def equip_item(self, item_type, item_name):
        if item_type == 'weapons':
            if self.equipped_weapon:
                self.inventory['weapons'].append(self.equipped_weapon)
            if item_name in self.inventory['weapons']:
                self.equipped_weapon = item_name
                self.inventory['weapons'].remove(item_name)
                input(f'[Voc√™ equipou: {item_name}]')
            else:
                input('[Item n√£o encontrado no invent√°rio!]')

    def has_item(self, item_type, item_name):
        return item_name in self.inventory.get(item_type, [])

    def check_health(self):
        if self.health <= 0:
            slow_print(f"\n{RED}{BOLD}GAME OVER{END}", delay=0.1)
            sys.exit()
        elif self.health <= 5:
            slow_print(f"{YELLOW}Aviso: Sua sa√∫de est√° cr√≠tica!{END}")

# Game Signs
class SignsManager:
    def __init__(self):
        self.signs = {
            # Placa 1: Dire√ß√µes (Floresta x Rio)
            "floresta_rio": {
                "header": f"--- PLACA ---",
                "text": "[<--- Floresta x Rio --->]",
                "footer": "------------------"
            },
            # Placa 2: Instru√ß√µes do Menu (Exclusiva!)
            "menu_jogo": {
                "header": f"{YELLOW}======================================={END}",
                "text": f"{BOLD}    Pressione 'm' para abrir o menu{END}",
                "footer": f"{YELLOW}======================================={END}"
            }
        }

    def show_sign(self, sign_name):
        if sign_name in self.signs:
            sign = self.signs[sign_name]
            slow_print(f"\n{BLUE}{sign['header']}{END}", delay=0.01)
            slow_print(sign["text"], delay=0.01)
            slow_print(f"{BLUE}{sign['footer']}{END}\n", delay=0.01)
        else:
            slow_print(f"{RED}Placa n√£o encontrada!{END}")
            input()

sign = SignsManager()

# Game Menu
def global_input(player, prompt=""):
    while True:
        user_input = input(prompt).lower()
        if user_input == 'm':
            show_status(player)
            clear_screen()
            print(prompt, end="")
            continue
        return user_input

signs_manager = SignsManager()

def show_status(player):
    clear_screen()
    slow_print(f'''{BLUE}====== STATUS DE {player.name.upper()} ======={END}

{GREEN}‚ù§Ô∏è  SA√öDE:{END} {BOLD}{player.health:02d}/20{END}
{YELLOW}‚öîÔ∏è  ATAQUE:{END} {BOLD}{player.attack}{END}
{RED}üéØ CR√çTICO:{END} {BOLD}{player.crit_chance}%{END}
{BLUE}üõ°Ô∏è  DEFESA:{END} {BOLD}{player.defense}{END}

{BLUE}=========== EQUIPAMENTOS ==========={END}

ARMA: {BOLD}{player.equipped_weapon or "Nenhuma"}{END}
ARMADURA: {BOLD}{player.equipped_armor or "Nenhuma"}{END}
{YELLOW}üåü REPUTA√á√ÉO: {END}{BOLD}{player.reputation}{END}

{BLUE}===================================={END}

[{BLUE}Pressione {END}{BOLD}ENTER{END}{BLUE} para continuar{END}]

{BLUE}===================================={END}''', delay=0.005)
    input()

escolhas = {
    'porta': {
        'descricao': 'Porta de metal enferrujada',
        'estado': 'trancada',
        'acao': 'examinar',
        'opcao': 'a',
        'mensagem': 'Voc√™ v√™ uma porta de metal com um cadeado resistente',
        'requer_item': None,
        'item_necessario': None
    },
    'janela': {
        'descricao': 'Pequena janela com barras',
        'estado': 'bloqueada',
        'acao': 'olhar',
        'opcao': 'b',
        'mensagem': 'Atrav√©s das barras, voc√™ v√™ um grande gramado l√° fora',
        'requer_item': None,
        'item_necessario': None
    },

    'caixa': {
        'descricao': 'Caixa de madeira no canto',
        'estado': 'fechada',
        'acao': 'abrir',
        'opcao': 'c',
        'mensagem': 'Uma caixa de madeira empoeirada est√° no canto',
        'requer_item': None,
        'item_necessario': None
    }
}

def first_scene(player):
    clear_screen()
    slow_print(f'''{BLUE}======================================={END}
{BOLD}{colored_text('           [CELA DA PRIS√ÉO]', YELLOW)}{END}
{BLUE}======================================={END}

Em sua frente, voc√™ encontra:''', delay=0.005)
    
    # Mostra op√ß√µes dispon√≠veis
    for item_id, item in escolhas.items():
        if item['estado'] not in ['removido', 'invisivel']:
            slow_print(f"- {item['descricao'].capitalize()} ({colored_text(item['opcao'], GREEN)}) [{item['estado']}]", delay=0.005)
    
    slow_print(f"\n{BLUE}======================================={END}", delay=0.005)
    slow_print(f"{RED}Sair do jogo{END} {BOLD}(q){END}")
    slow_print(f"{BLUE}======================================={END}", delay=0.005)

def first_choice(player):
    while True:
        first_scene(player)
        slow_print('\nO que voc√™ faz? ', delay=0.005, end=" ")
        escolha = input().lower().strip()
        
        if escolha == 'q':
            sys.exit()
        
        # Procura a escolha correspondente
        acao = None
        for item_id, item in escolhas.items():
            if item['opcao'] == escolha:
                acao = item_id
                break
        
        if acao:
            clear_screen()
            slow_print(f"\n{escolhas[acao]['mensagem']}", delay=0.01)
            
            # L√≥gica espec√≠fica para cada a√ß√£o
            if acao == 'caixa' and escolhas['caixa']['estado'] == 'fechada':
                input()
                slow_print("Voc√™ abre a caixa e encontra uma chave enferrujada!", delay=0.01)
                input()
                player.add_to_inventory('keys', 'Chave da cela')
                escolhas['caixa']['estado'] = 'aberta'
                escolhas['porta']['requer_item'] = 'keys'
                escolhas['porta']['item_necessario'] = 'Chave da cela'
                clear_screen()
            
            elif acao == 'porta':
                if player.has_item('keys', 'Chave da cela'):
                    input()
                    slow_print(f"[{BLUE}A chave se encaixa perfeitamente no cadeado{END}]")
                    input()
                    clear_screen()
                    very_slow_print("A porta se abre com um rangido sinistro...")
                    input()
                    escolhas['porta']['estado'] = 'aberta'
                    return True  # Indica que a porta foi aberta
                else:
                    input()
                    slow_print("A porta est√° trancada... Voc√™ precisa de uma chave.")
            
            input()
        else:
            slow_print(f"\n{RED}Op√ß√£o inv√°lida. Tente novamente.{RED}", delay=0.08)

def game_introduction():
    clear_screen()
    slow_print(f'[{BLUE}Pressione {END}{BOLD}Enter{END}{BLUE} para continuar{END}]')
    input()
    clear_screen()
    very_slow_print('Escuro...', delay=0.22)
    input()
    very_slow_print('Apenas...', delay=0.22)
    input()
    clear_screen()
    very_slow_print('Escuro...', delay=0.5)
    input()
    clear_screen()
    slow_print("...", delay=0.7)
    
    # Get player name
    while True:
        slow_print(f'{BOLD}{GREEN}- Qual √© meu nome mesmo?{END}', delay=0.02, end=' ')
        player_name = input().strip()
        if player_name:
            break
        slow_print(f'{GREEN}- Eu tenho um nome...{END}', delay=0.09)
        input()
        clear_screen()
    
    clear_screen()
    slow_print(f"{GREEN}- {player_name}...{END}", delay=0.12)
    input()
    clear_screen()
    slow_print(f"{GREEN}- N√£o sei onde estou...{END}")
    input()
    slow_print(f"{GREEN}- Preciso fazer algo...{END}")
    input()
    
    return player_name

def initial_scene(player):
    while True:
        clear_screen()
        menu_text = f"""
{BOLD}======================================={END}
{colored_text(f"{GREEN}- DEVO ME LEVANTAR?{END}", BOLD)}
{colored_text("1 - Levantar", GREEN)}
{colored_text("2 - Continuar deitado", RED)}
{BOLD}======================================={END}

Digite sua escolha:"""
        slow_print(menu_text, delay=0.01)
        
        choice = input().strip()\
        
        if choice == '1':
            clear_screen()
            slow_print("\nH√° uma luz saindo de uma pequena janela...")
            input()
            break
        elif choice == '2':
            slow_print('\n[Levanta, vagabundo!]', delay=0.02)
            input()
            clear_screen()
        else:
            slow_print('\nEscolha uma op√ß√£o v√°lida!', delay=0.02)
            clear_screen()

    # Continue the story
    slow_print('Voc√™ corre at√© a luz...', delay=0.05)
    input()
    slow_print('A claridade machuca seus olhos...', delay=0.05)
    input()
    very_slow_print("...", delay=0.7)
    input()
    clear_screen()
    slow_print(f'{GREEN}- Estou preso...{END}', delay=0.1)
    input()
    clear_screen()
    slow_print(f'Voc√™ olha em volta e percebe que est√° preso em uma cela escura e √∫mida.')
    input()
    slow_print('Ao observar a sela voc√™ encontra algumas coisas...')
    input()
    
    # Inicia o sistema de escolhas interativas
    porta_aberta = False
    while not porta_aberta:
        porta_aberta = first_choice(player)
    
    # Continua√ß√£o ap√≥s sair da cela
    clear_screen()
    slow_print("Voc√™ sai da cela e se encontra em um corredor escuro...")
    input()

def second_scene():
    clear_screen()
    slow_print(f'''{BLUE}======================================={END}
{colored_text('            [DOIS CAMINHOS]', YELLOW)}
{BLUE}======================================={END}

Para qual lado voc√™ ir√°?
[1] Esquerda (Floresta Densa)
[2] Direita (Rio)''', delay=0.005)
    slow_print(f"\n{BLUE}======================================={END}", delay=0.005)
    slow_print(f"{RED}Sair do jogo{END} {BOLD}(q){END}")
    slow_print(f"{BLUE}======================================={END}", delay=0.005)

def second_choice():
    while True:
        second_scene()
        way = input('')
        if way == 'q':
            sys.exit()
        elif way == '1':
            clear_screen()
            slow_print(f'{GREEN}- Ent√£o irei pela floresta')
            input('')
            return 'left'
        elif way == '2':
            clear_screen()
            slow_print(f'{GREEN}- Ent√£o irei pelo rio')
            input('')
            return 'right'
        else:
            slow_print(f"\n{RED}Op√ß√£o inv√°lida. Tente novamente.{RED}", delay=0.08)
            clear_screen()

def after_ceil():
    clear_screen()
    slow_print(f'{GREEN}- Finalmente a porta se abriu{END}')
    input()
    clear_screen()
    slow_print('''Ao passar pela porta, voc√™ percebe que aquela cela era apenas
uma pequena sala no meio de um grande campo...''')
    input()
    slow_print('Voc√™ olha para o ch√£o e percebe um caminho levando para uma grande floresta')
    input()
    slow_print('Como voc√™ n√£o tem outra escolha, come√ßa a seguir este caminho')
    input()
    clear_screen()
    slow_print('''Depois de uma longa caminhada seguindo a estrada, voc√™ percebe que ela
leva at√© uma √°rvore e que se divide para dois lados.''')
    input()
    slow_print('Na frente dessa √°rvore, voc√™ v√™ uma placa')
    input()
    clear_screen()
    slow_print(f'''{YELLOW}======================================={END}

      {BOLD}[<--- Floresta x Rio --->]{END}

{YELLOW}======================================={END}''', delay=0.01)
    input()
    clear_screen()
    slow_print('Qual caminho voc√™ escolher√°?')
    input()
    clear_screen()

def left_way():
    slow_print('jaojdoejojedw')

def right_way():
    clear_screen()
    slow_print('...')
    input()
    slow_print('Um pouco adiante, voc√™ v√™ outra placa com uma informa√ß√£o')
    input()
    clear_screen()
    while True:
        slow_print(f'''{BOLD}======================================={END}
{colored_text(f"{GREEN}     Deseja ver a placa ou ignorar?{END}", BOLD)}
{colored_text("1 - Ver", GREEN)}
{colored_text("ENTER - Ignorar", RED)}
{BOLD}======================================={END}''', delay=0.01)
        slow_print('Digite sua escolha:')
        choice = input()

        if choice == '1':
            sign.show_sign('menu_jogo')
            escolha = global_input(player).lower()
            if escolha == 'm':
                show_status(player)

# Game start
def debug_mode():
    # DevMode
    player = Player("DebugPlayer")  # Create a debugger player
    player.add_to_inventory('keys', 'Chave da cela')  # Add important items to inventory
    

    while True:
        slow_print('Escolha a cena que deseja testar:', delay=0.005)
        print('')
        slow_print('In√≠cio [1], Pris√£o [2], P√≥s Pris√£o [3], Mostrar Menu [4], Rio [5]', delay=0.005)
        scene = input()
    
        if scene == '1':
            initial_scene(player)
            clear_screen()
        elif scene == '2':
            first_choice(player)
            clear_screen()
        elif scene == '3':
            after_ceil()
            clear_screen()
        elif scene == '4':
            show_status(player)
            clear_screen()
        elif scene == '5':
            right_way()
            clear_screen()
        else:
            slow_print('Digite uma op√ß√£o v√°lida', delay=0.08)
            clear_screen()

    return player

player = debug_mode()
   
def main():
    # Game setup
    player_name = game_introduction()
    hero = Player(player_name)
    
    # Start the story
    initial_scene(hero)
    
    # Continue story...
    slow_print("Sua aventura est√° apenas come√ßando...")
    input()
    after_ceil()
    game = second_choice()

    # story line
    if game == 'left':
        left_way()
    elif game == 'right':
        right_way()

if __name__ == "__main__":
    #main()

    # To enter in debug mode, comment "main()" line and uncomment "debug_mode()" line and player var
    debug_mode()

def rio():
    def menu():
        while True:
            print(f'{BOLD}======================================={END}')
            print('')
            print(f'{BOLD}O QUE DESEJA, {Player.name}{END}?')
            print('')
            print('Continuar[a]')
            print('Ver seu perfil[b]')
            print('Abrir o invent√°rio[c]')
            print('Ver miss√µes[d]')
            print('')
            print(f'{BOLD}======================================={END}')
            mm = input(':')

            def perfil():
                while True:
                    print(f'{VERD}======================================={END}')
                    print(f'{BOLD}PERFIL DE {un}:{END}')
                    print('')
                    print('HP:', prof['status']['hp'])
                    print('Defesa:', prof['status']['defe'])
                    print('Ataque:', prof['status']['atk'])
                    print(f'Dano Cr√≠tico: {prof["status"]["crit"]}')
                    print('')
                    print(f'{BOLD}-----//-----//-----//-----//-----//----{END}')
                    print('')
                    print(f'{BOLD}ARMADURA:{END}')
                    print('')
                    print('Cabe√ßa:', prof['armor']['cbc'])
                    print('Peito:', prof['armor']['peito'])
                    print('P√©s:', prof['armor']['pe'])
                    print('M√£o:', prof['armor']['mao'])
                    print('Arma:', prof['armor']['arma'])
                    print('')
                    print('[sair[a]]')
                    print(f'{VERD}======================================={END}')
                    nn = input(':')

                    if nn == 'a':
                        break
                    else:
                        print('Digite uma op√ß√£o v√°lida')
                        continue

            def quest():
                while True:
                    print(f'{VERD}======================================={END}')
                    print('')
                    print(BOLD, 'MISS√ïES ATIVAS:', END)
                    print(list(quests))
                    print('')
                    print('[sair[a]]')
                    print(f'{VERD}======================================={END}')
                    qq = input('')

                    match qq:
                        case 'a':
                            break
                        case _:
                            print('Digite uma op√ß√£o v√°lida')

            def inv():
                while True:
                    print(f'{VERD}======================================={END}')
                    print('')
                    print(f'{BOLD}ITENS{END}')
                    print('')
                    print('Chaves:')
                    print(invent['chaves'])
                    print('')
                    print('Outros Itens:')
                    print(invent['outro'])
                    print('')
                    print(f'{BOLD}-----//-----//-----//-----//-----//----{END}')
                    print('')
                    print(f'{BOLD}ARMAS E ARMADURAS:{END}')
                    print('')
                    print('Cabe√ßa:', invent['cbc'])
                    print('Peito:', invent['peito'])
                    print('P√©s:', invent['pe'])
                    print('M√£o:', invent['mao'])
                    print('Arma:', invent['arma'])
                    print('')
                    print('[sair[a]]')
                    print(f'{VERD}======================================={END}')
                    bb = input(':')

                    if bb == 'a':
                        break
                    else:
                        print('Digite uma op√ß√£o v√°lida')

            if mm == 'a':
                break

            elif mm == 'b':
                print(perfil())

            elif mm == 'c':
                print(inv())

            elif mm == 'd':
                print(quest())

            else:
                print('Digite uma op√ß√£o v√°lida')
                continue

    print('')
    print(f'{AZUL}======================================={END}')
    print('')
    print('[Voc√™ escolheu o caminho da direita.]')
    print('√â agora que sua jornada realmente come√ßa...')
    print('')
    print(f'{AZUL}======================================={END}')
    print('')
    input(':')
    print(menu())

    input('Prosseguindo...')
    input('Voc√™ come√ßou a seguir o caminho que a placa apontou dizendo que tem um rio')
    input('Mas n√£o √© poss√≠vel ver rio nenhum')
    input('Ao inv√©s disso s√≥ tem uma grande quantidade de √°rvores cobrindo toda a vis√£o')
    input('Tudo o que d√° pra ver alem das √°rvores √© o caminho que est√° quase apagado')
    slow_print("...", delay=0.7)

    if prof['status']['hp'] <= 0:
        input(f'{VERM}VOC√ä MORREU{END}')
        sys.exit(0)
    input('[Tem algo se mechendo no mato]')
    input('...')
    input('[Era um sapo azul...]')
    print('...')
    input('Decepcionante...')
    while True:
        print(f'{VERM}======================================={END}')
        print(f'{BOLD}[VAI FAZER ALGO COM O SAPO?]{END}')
        print('Bater[a] Pegar[b] Ignorar[c] Abrir o Menu[d]')
        print(f'{VERM}======================================={END}')
        his = input('')

        if mons['Sapo Azul']['hp'] <= 0:
            input(f'{BOLD}[Voc√™ derrotou o sapo...]{END}')
            break

        if prof['status']['hp'] <= 0:
            input(f'{VERM}VOC√ä MORREU{END}')
            sys.exit(0)

        match his:
            case 'a':
                input(f'{BOLD}[Voc√™ bateu no sapo]{END}')
                matak = rantk()
                atak = sapotk()
                print(f'{VERM}======================================={END}')
                input(f'{BOLD}O sapo perdeu {matak} de {mons["Sapo Azul"]["hp"]} pontos de vida{END}')
                input(f'{BOLD}Voc√™ perdeu {atak} de {prof["status"]["hp"]} pontos de vida{END}')
                print(f'{VERM}======================================={END}')
                mons['Sapo Azul']['hp'] = mons['Sapo Azul']['hp'] - matak
                prof['status']['hp'] = prof['status']['hp'] - atak

            case 'b':
                input(f'{BOLD}[Voc√™ pegou o sapo]{END}')
                input('...')
                input('[Ele jogou a l√≠ngua em sua testa]')
                print(f'{VERM}======================================={END}')
                input(f'{BOLD}{mons["Sapo Azul"]["sacanaji"]} de dano{END}')
                input(f'{BOLD}Voc√™ morreu...{END}')
                print(f'{VERM}======================================={END}')
                sys.exit(0)

            case 'c':
                input('[Voc√™ ignorou o sapo e passou direto]')
                slow_print("...", delay=0.7)
                input('Ele foi embora')
                slow_print("...", delay=0.7)
                break

            case 'd':
                print(menu())
                continue

            case _:
                input('Escolha uma op√ß√£o v√°lida')
                continue

    input('...')
    input('Ok n√©')
    input('Continuando...')
    input('Voc√™ continua seguindo a estrada')
    input('[Um barulho de √°gua correndo]')
    input('[Parece que o rio j√° est√° perto]')
    input('Tem uma luz mais forte saindo do meio de duas √°rvores')
    input('Quando voc√™ passa por elas...')
    input('Tem uma bela nascente cercada de pedras')
    input('A nascente vai at√© uma parede com um moinho que s√≥ d√° passagem para a √°gua')
    input('Parece ser perigoso demais pra tentar passar')
    input('Mas ao lado da parede, tem uma pequena e simples cabana')
    input('Suas √∫nicas op√ß√µes s√£o entrar ou esperar at√© apodrecer')
    input('Ent√£o voc√™ resolve ir at√© a cabana')
    input('[Tem um pequeno sino como campainha]')
    slow_print("...", delay=0.7)
    input('[O sino foi tocado]')
    input('[Mas ningu√©m veio]')
    slow_print("...", delay=0.7)
    input('Quando voc√™ se prepara pra tocar novamente, a porta se abre')
    input('[√â um senhorzinho]')
    input(f'{FAMAR}- O que o traz aqui rapaz?{END}')
    input('...[Voc√™ conta toda a hist√≥ria]...')
    input(f'{FAMAR}- Entendi... voc√™ foi mais um...{END}')
    input('[Como assim mais um?]')
    input(f'{FAMAR}- Enfim, preciso saber se voc√™ est√° preparado para prosseguir.{END}')
    input(f'{FAMAR}- Te darei uma miss√£o simples{END}')
    input(f'{FAMAR}- Se completar, ganhar√° uma boa recompensa{END}')
    input(f'{FAMAR}- Tome, voc√™ vai precisar...{END}')
    input(f'{AZUL}[Voc√™ recebeu uma adaga]{END}')
    prof['armor']['arma'] = f'''Adaga Pequena
    {VERM}+2 Dano / +1 Cr√≠tico{END}'''
    while True:
        global histo
        print(f'{BOLD}======================================={END}')
        print(f'{BOLD}[Deseja abrir o menu?]{END}')
        print(f'{BOLD}Sim[a] N√£o[b]{END}')
        print(f'{BOLD}======================================={END}')
        histo = input('')

        match histo:
            case 'a':
                print(menu())
                histo = 0
                break
            case 'b':
                break
            case _:
                input('Escolha uma op√ß√£o v√°lida')
                continue

def floresta():
    his = ''

    def menu():
        while True:
            print(f'{VERM}======================================={END}')
            print('')
            print(f'{BOLD}O que deseja, {un}{END}?')
            print('')
            print('Continuar[a]')
            print('Ver seu perfil[b]')
            print('Abrir o invent√°rio[c]')
            print('Ver miss√µes[d]')
            print('')
            print(f'{VERM}======================================={END}')
            mm = input(':')

            def perfil():
                while True:
                    print(f'{VERD}======================================={END}')
                    print(f'{BOLD}PERFIL DE {un}:{END}')
                    print('')
                    print('HP:', prof['status']['hp'])
                    print('Defesa:', prof['status']['defe'])
                    print('Ataque:', prof['status']['atk'])
                    print('')
                    print(f'{BOLD}-----//-----//-----//-----//-----//----{END}')
                    print('')
                    print(f'{BOLD}ARMADURA:{END}')
                    print('')
                    print('Cabe√ßa:', prof['armor']['cbc'])
                    print('Peito:', prof['armor']['peito'])
                    print('P√©s:', prof['armor']['pe'])
                    print('M√£o:', prof['armor']['mao'])
                    print('Arma:', prof['armor']['arma'])
                    print('')
                    print('[sair[a]]')
                    print(f'{VERD}======================================={END}')
                    nn = input(':')

                    if nn == 'a':
                        break
                    else:
                        print('Digite uma op√ß√£o v√°lida')
                        continue

            def inv():
                while True:
                    print(f'{FAMAR}======================================={END}')
                    print('')
                    print(f'{BOLD}ITENS{END}')
                    print('')
                    print('Chaves:')
                    print(invent['chaves'])
                    print('')
                    print('Outros Itens:')
                    print(invent['outro'])
                    print('')
                    print(f'{BOLD}-----//-----//-----//-----//-----//----{END}')
                    print('')
                    print(f'{BOLD}ARMAS E ARMADURAS:{END}')
                    print('')
                    print('Cabe√ßa:', invent['cbc'])
                    print('Peito:', invent['peito'])
                    print('P√©s:', invent['pe'])
                    print('M√£o:', invent['mao'])
                    print('Arma:', invent['arma'])
                    print('')
                    print('[sair[a]]')
                    print(f'{FAMAR}======================================={END}')
                    bb = input(':')

                    if bb == 'a':
                        break
                    else:
                        print('Digite uma op√ß√£o v√°lida')

            if mm == 'a':
                break

            elif mm == 'b':
                print(perfil())

            elif mm == 'c':
                print(inv())

            else:
                print('Digite uma op√ß√£o v√°lida')
                continue

    if his == 'abrir menu':
        print('menu()')

    print('')
    print(f'{VERD}======================================={END}')
    print('')
    print('[Voc√™ escolheu o caminho da esquerda.]')
    print('√â agora que sua jornada realmente come√ßa...')
    print('')
    print(f'{VERD}======================================={END}')
    print('')
    input(':')
    print(menu())

    print(f'{BOLD}======================================={END}')
    print('')
    print('Digite "abrir menu" para abrir o Menu novamente')
    print('')
    print(f'{BOLD}======================================={END}')
    print('')
    input(f'[{BOLD}Pressione {END}{BOLD}Enter{END}{BLUE} para continuar{END}]')
    print('')

    input('Prosseguindo...')
    his = input('')
    input('Voc√™ come√ßou a seguir o caminho que parece levar at√© uma extensa floresta')

    if his == 'abrir menu':
        print(menu())
        print('Ahhhhh')